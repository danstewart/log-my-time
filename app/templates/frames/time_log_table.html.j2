{% set date_fmt = 'Do [of] MMM YYYY [at] HH:mm' %}
<section id="records">
    <div class="accordion">
        {# Add new record button #}
        <div class="accordion-item">
            <h2 class="accordion-header" id="accordion-add-header">
                <div class="d-flex">
                    <button class="accordion-button collapsed border-end"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordion-add-body"
                            aria-controls="add-accordion-body">
                        <div class="d-flex justify-content-center flex-grow-1">
                            Log Time
                            <i class="bi bi-clock ms-2"></i>
                        </div>
                    </button>
                    <button class="accordion-button collapsed"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordion-add-body"
                            aria-controls="add-accordion-body">
                        <div class="d-flex justify-content-center flex-grow-1 align-items-center">
                            Add Annual Leave
                            <i class="bi bi-brightness-alt-high ms-2 fs-4"></i>
                        </div>
                    </button>
                </div>
            </h2>
            <div id="accordion-add-body"
                 class="accordion-collapse collapse"
                 aria-labelledby="accordion-add-header"
                 data-parent="#accordion-add">
                <div class="container mt-2 mb-2">
                    <dynamic-frame :url="/frames/time_form/" :execute-scripts="true">
                    </dynamic-frame>
                </div>
            </div>
        </div>
        {# List of existing time records #}
        {% for time in time_entries %}
            {# djlint:off #}
            {% set now = arrow.now() %}
            {% set start = arrow.get(time.start).to(settings.timezone) %}
            {% set end = arrow.get(time.end).to(settings.timezone) if time.end else '' %}
            {# djlint:on #}
            <div class="accordion-item">
                <h2 class="accordion-header" id="accordion-{{ time.id }}-header">
                    <button class="accordion-button collapsed"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordion-{{ time.id }}-body"
                            aria-controls="{{ time.id }}-accordion-body">
                        <div class="d-flex justify-content-between flex-grow-1">
                            <div class="d-flex flex-column">
                                <p class="fw-bold mb-1">{{ start.format("dddd Do [of] MMM") }}</p>
                                <p>{{ start.format("HH:mm") }} - {{ end.format("HH:mm") if end else 'Still clocked in' }}</p>
                            </div>
                            <span class="badge bg-secondary time-badge">{{ humanize_seconds(time.logged(), short=True) }}</span>
                        </div>
                    </button>
                </h2>
                <div id="accordion-{{ time.id }}-body"
                     class="accordion-collapse collapse"
                     aria-labelledby="accordion-{{ time.id }}-header"
                     data-parent="#accordion-{{ time.id }}">
                    <div class="container mt-2 mb-2">
                        {# TODO: Make this frame lazily loaded #}
                        <dynamic-frame :url="/frames/time_form/{{ time.id }}" :execute-scripts="true">
                        </dynamic-frame>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</section>
<script>
    (function() {
        const frame = document.currentScript.parentNode;

        // If any time data changes then update ourselves
        window.addEventListener("time:changed", e => frame.refresh());
    })();
</script>
