{"version":3,"sources":["../../../../src/static/js/binder/controller.js"],"sourcesContent":["import { kebabToCamel, permutations, parseDuration, parseBoolean } from \"./util.js\";\n\n/**\n * @class\n * @name Controller\n * @namespace Controller\n */\nclass Controller extends HTMLElement {\n    /**\n     * @static\n     * @name observedAttributes\n     * @type String[]\n     * @memberof! Controller\n     * @description These are the attributes to watch for and react to changes\n     * This is handled by `attributeChangedCallback()`\n     * The default implementation will call `set{AttributeName}(oldValue, newValue)`\n     */\n    static observedAttributes = [];\n\n    /**\n     * Create a new custom controller element\n     * @param {*} args\n     */\n    constructor(args) {\n        super();\n\n        // Store for internal data\n        this._internal = {};\n\n        this.root = this;\n        this.args = args;\n\n        // Keep track of all attached events\n        this._events = [];\n\n        // Handle <self> node\n        // By default an empty element will only contain it's `self` content\n        // Can also be added manually using <self></self>\n        if (this.innerHTML.trim() === \"\") this.innerHTML = \"<self></self>\";\n        this.self = this.querySelector(\"self\");\n\n        // Add the data-controller attribute to the element\n        this.setAttribute(\"data-controller\", this.localName);\n\n        this.template = this.root.querySelector(\"template\");\n\n        // If the component has a template then we will clone it and render that to the DOM\n        // If the template has the :use-shadow attribute then we will clone it onto the shadow DOM\n        // This allows isolating the component from the regular DOM (including styles)\n\n        // The template is optional, if not specified then we will do everything directly on the DOM within the component\n        if (this.template) {\n            this.content = this.template.content.cloneNode(true);\n\n            // Only use the shadowDOM when specified\n            if (this.template.hasAttribute(\":use-shadow\")) {\n                this.attachShadow({ mode: \"open\" }).appendChild(this.content.cloneNode(true));\n\n                this.root = this.shadowRoot;\n                this.hasShadow = true;\n            } else {\n                this.appendChild(this.content.cloneNode(true));\n                this.hasShadow = false;\n            }\n        }\n    }\n\n    /**\n     * @method\n     * @name connectCallback\n     * @memberof! Controller\n     * @description Called when element is rendered in the DOM\n     * See: {@link https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks}\n     */\n    async connectedCallback() {\n        if (!this.isConnected) return;\n\n        this.renderOnInit = parseBoolean(this.renderOnInit || \"true\");\n\n        this.bind();\n        await this.init(this.args);\n\n        if (this.autoRender) {\n            const interval = parseDuration(this.autoRender);\n            this.setAutoRender(interval);\n        }\n\n        if (this.renderOnInit) this.render();\n    }\n\n    /**\n     * Runs when the element in removed from the DOM\n     */\n    disconnectedCallback() {\n        this._events.forEach(e => e.el.removeEventListener(e.eventType, e.event));\n        this._events = [];\n    }\n\n    /**\n     * @method\n     * @name attributeChangedCallback\n     * @memberof! Controller\n     * @description The default implementation of attributeChangedCallback\n     * See: {@link https://developers.google.com/web/fundamentals/web-components/customelements#attrchanges}\n     * We will convert the attribute name to camel case, strip out the leading `data-` or `aria-` parts and call `set{AttributeName}(oldValue, newValue)` (if it exists)\n     * Eg. A change to `data-disabled` will call `setDisabled(oldValue, newValue)`\n     * @param {string} name The name of the attribute that changed\n     * @param {string} oldValue The old value of the attribute\n     * @param {string} newValue The new value of the attribute\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        let handler = name.replace(/^data-/, \"\");\n        handler = handler.replace(/^aria-/, \"\");\n        handler = kebabToCamel(handler);\n        handler = `set${handler.charAt(0).toUpperCase()}${handler.slice(1)}`;\n\n        if (handler in this && typeof this[handler] === \"function\") {\n            this[handler](oldValue, newValue);\n        }\n    }\n\n    /**\n     * @method\n     * @name Controller#emit\n     * @memberof! Controller\n     * @description Emit a new event from this controller\n     * @param {string} eventName The name of the event, automatically prefixed with `${this.localName}:`\n     * @param {object} detail Optional object that is passed in the event under the key `detail`\n     * @param {object} config Optional configuration object that can be passed to `new CustomEvent()`\n     */\n    emit(eventName, detail = {}, config = {}) {\n        this.dispatchEvent(\n            new CustomEvent(eventName, {\n                bubbles: true,\n                cancelable: true,\n                composed: true,\n                detail: detail,\n                ...config,\n            })\n        );\n    }\n\n    /**\n     * @method\n     * @name listenFor\n     * @memberof! Controller\n     * @description Listens for an event to be fired from a child element\n     * @param {Element} target The element to listen for events from, use `window` to listen for global events\n     * @param {string} eventName The name of the event to listen for\n     * @param {function} callback The callback to call when the event is fired\n     */\n    listenFor(target, eventName, callback) {\n        target.addEventListener(eventName, e => callback(e));\n    }\n\n    /**\n     * @method\n     * @name bind\n     * @memberof! Controller\n     * @description Initializes the controller instance\n     * Can be called manaually when the child elements change to force refreshing the controller state\n     * eg. re-attach events etc...\n     */\n    bind() {\n        // TODO: Might be useful to bind a specific node/tree\n\n        // We only want to configure the arguments on the first bind()\n        if (!this._internal.bound) {\n            this.#bindArgs();\n        }\n\n        this.#bindEvents();\n        this.#bindDataValues();\n\n        this._internal.bound = true;\n    }\n\n    /**\n     * @method\n     * @name setAutoRender\n     * @memberof! Controller\n     * @description Sets an interval to auto call `this.render()`\n     * Overwrites previously set render intervals\n     * @param {*} interval Duration in milliseconds\n     */\n    setAutoRender(interval) {\n        if (interval === undefined) {\n            console.error(`[${this.localName}] Undefined interval passed to setAutoRender`);\n            return;\n        }\n\n        if (this._internal.autoRenderInterval) {\n            window.clearInterval(this._internal.autoRenderInterval);\n        }\n\n        this._internal.autoRenderInterval = window.setInterval(() => this.render(), interval);\n    }\n\n    /**\n     * @method\n     * @name init\n     * @memberof! Controller\n     * @description Called during the `connectedCallback()` (when an element is created in the DOM)\n     * Expected to be overridden\n     * @param {*} args\n     */\n    async init(args) {}\n\n    /**\n     * @method\n     * @name render\n     * @memberof! Controller\n     * @description Re-renders everything with the @render attribute\n     */\n    async render() {\n        // TODO: Might be handy to be able to render one element or element tree\n\n        // Render self\n        // TODO: Better way to do this?\n        if (this.renderSelf && typeof this.renderSelf === \"function\") {\n            this.renderSelf();\n        }\n\n        this.#findRenderableElements().forEach(el => {\n            // Store the original template as an attribute on the element on first render\n            let template = el.getAttribute(\"_template\");\n            if (!template) {\n                template = el.innerText;\n                el.setAttribute(\"_template\", template);\n            }\n\n            // If the element has the attribute with .eval then eval the template\n            // This should be used sparingly and only when the content is trusted\n            const evalMode = el.hasAttribute(`@render.eval`);\n\n            let replacerRegex = /\\$\\{(.*?)\\}/g; // Find template vars: ${var}\n\n            template.replace(replacerRegex, (replacer, key) => {\n                if (evalMode) {\n                    const fn = new Function(`return ${key}`);\n                    template = template.replace(replacer, fn.call(this));\n                } else {\n                    // If not in `evalMode` then we do an eval-like replacement\n                    // We will dig into the controller instance and replace in the variables\n                    // This handles dot notation and array notation\n                    let pos = null;\n\n                    // Split on dots and brackets and strip out any quotes\n                    key.split(/[\\.\\[\\]]/)\n                        .filter(item => !!item)\n                        .forEach(part => {\n                            part = part.replace(/[\"']/g, \"\"); // Strip out square brackets\n                            part = part.replace(/\\(\\)/g, \"\"); // Strip out function parens\n\n                            if (pos == null && part === \"this\") {\n                                pos = this;\n                                return;\n                            }\n\n                            if (pos && part in pos) {\n                                pos = pos[part];\n                            } else {\n                                pos = null;\n                                return;\n                            }\n                        });\n\n                    if (pos == null) pos = \"\";\n                    if (typeof pos === \"function\") pos = pos.call(this);\n                    template = template.replace(replacer, pos.toString() || \"\");\n                }\n            });\n\n            // TODO: This may be innefecient\n            el.innerHTML = template;\n        });\n    }\n\n    /**\n     * @method\n     * @private\n     * @name findRenderableElements\n     * @memberof! Controller\n     * @description Find all elements on the controller which have @render attributes\n     * @render is a special action that let's the controller know to render this elements content when the render() method is called\n     */\n    #findRenderableElements() {\n        return [...this.root.querySelectorAll(`[\\\\@render]`), ...this.root.querySelectorAll(`[\\\\@render\\\\.eval]`)].filter(el => this.belongsToController(el));\n    }\n\n    /**\n     * @method\n     * @private\n     * @name bindArgs\n     * @memberof! Controller\n     * @description Bind all attributes on the controller tag into the instance under `this`\n     * Convert kebab-case to camelCase\n     * EG. <controller :some-arg=\"150\" /> will set `this.someArg = 150`\n     */\n    #bindArgs() {\n        this.args = {};\n\n        this.getAttributeNames().forEach(attr => {\n            const value = this.getAttribute(attr);\n            const key = kebabToCamel(attr).replace(\":\", \"\");\n            this.args[key] = value;\n        });\n    }\n\n    /**\n     * @method\n     * @private\n     * @name bindEvents\n     * @memberof! Controller\n     * @description Finds all events within a controller element\n     * Events are in the format `@{eventType}={method}\"`\n     * EG. @click=\"handleClick\"\n     *\n     * The attribute key can also end with a combination of modifiers:\n     * - `.prevent`: Automatically calls `event.preventDefault()`\n     * - `.eval`: Will evaluate the attribute value\n     */\n    #bindEvents() {\n        // We need to delete all events and before binding\n        // Otherwise we would end up with duplicate events upon muliple bind() calls\n        this._events.forEach(e => e.el.removeEventListener(e.eventType, e.event));\n        this._events = [];\n\n        const bindEvent = (el, eventType, modifier) => {\n            const value = el.getAttribute(`@${eventType}${modifier}`);\n            const action = value.replace(\"this.\", \"\").replace(\"()\", \"\");\n\n            const callable = event => {\n                if (modifier.includes(\".prevent\")) event.preventDefault();\n\n                if (modifier.includes(\".eval\")) {\n                    const fn = new Function(`${value}`);\n                    fn.call(this);\n                } else {\n                    try {\n                        this[action](event);\n                    } catch (e) {\n                        console.error(`Failed to call '${action}' to handle '${event.type}' event on tag '${this.localName}'`, e);\n                    }\n                }\n            };\n\n            el.addEventListener(eventType, callable);\n\n            this._events.push({\n                el: el,\n                event: callable,\n                eventType: eventType,\n            });\n        };\n\n        // Find all controller child nodes with attributes that start with `@`\n        // TODO: Not sure of the performance impact of this\n        // Need to benchmark and compare to plain querySelector\n        // Another option is to parse the DOM as a string ourselves\n        const nodesWithEvents = document.evaluate(`.//*[@*[starts-with(name(), \"@\")]]`, this.root);\n\n        let eventNode = nodesWithEvents.iterateNext();\n        while (eventNode) {\n            if (!this.belongsToController(eventNode)) {\n                eventNode = nodesWithEvents.iterateNext();\n                continue;\n            }\n\n            for (let attr of eventNode.getAttributeNames()) {\n                if (!attr.startsWith(\"@\")) continue;\n\n                let [event, modifiers] = attr.replace(\"@\", \"\").split(\".\", 2);\n                modifiers = modifiers ? `.${modifiers}` : \"\";\n\n                // @render and @bind are handled separately\n                if (event === \"render\" || event === \"bind\") continue;\n\n                bindEvent(eventNode, event, modifiers);\n            }\n\n            eventNode = nodesWithEvents.iterateNext();\n        }\n    }\n\n    /**\n     * @method\n     * @private\n     * @name bindDataValues\n     * @memberof! Controller\n     * @description Find all elements within the controller that has a `@bind` attribute\n     * Each element will have it's value bound to the controller under `this`\n     * The value of the attribute will be converted from kebab-case to camelCase\n     *\n     * EG. <input @bind=\"the-input\" /> will have it's value bound to `this.theInput`\n     */\n    #bindDataValues() {\n        this.data = {};\n        const instance = this;\n\n        const tagToEvent = {\n            \"input|text\": \"keyup\",\n            default: \"change\",\n        };\n\n        // Event handlers for various element types\n        const handlers = {\n            \"input|checkbox\": (instance, varName, e) => {\n                if (!instance.data[varName]) instance.data[varName] = [];\n                if (e.target.checked) {\n                    instance.data[varName].push(e.target.value);\n                } else {\n                    instance.data[varName] = instance.data[varName].filter(item => item !== e.target.value);\n                }\n            },\n            select: (instance, varName, e) => {\n                if (e.target.getAttribute(\"multiple\") !== null) {\n                    instance.data[varName] = Array.from(e.target.selectedOptions).map(item => item.value);\n                } else {\n                    instance.data[varName] = e.target.value;\n                }\n            },\n            default: (instance, varName, e) => (instance.data[varName] = e.target.value),\n        };\n\n        // Logic to actually bind an element to the controller\n        const bindData = (el, modifier) => {\n            const elType = this.#getElementType(el);\n            const eventType = tagToEvent[elType] || tagToEvent.default;\n\n            el.addEventListener(eventType, e => {\n                const varName = el.getAttribute(`@bind${modifier}`).replace(\"this.data.\", \"\").replace(\"this.\", \"\");\n\n                const handler = handlers[elType] || handlers.default;\n                handler(instance, varName, e);\n\n                // If this element is @bind.render this call render()\n                if (modifier.includes(\".render\")) instance.render();\n            });\n        };\n\n        const modifiers = [\"\", ...permutations([\".render\"], true)];\n        modifiers.forEach(modifier => {\n            // Handle any binds on the root node\n            if (this.hasAttribute(`@bind${modifier}`)) {\n                bindData(this.root, modifier);\n            }\n\n            // Handle any binds on the children\n            const escapedModifier = modifier.replace(/\\./g, \"\\\\.\");\n            this.root.querySelectorAll(`[\\\\@bind${escapedModifier}]`).forEach(el => {\n                if (!this.belongsToController(el)) return;\n                bindData(el, modifier);\n            });\n        });\n    }\n\n    /**\n     * @method\n     * @private\n     * @name getElementType\n     * @memberof! Controller\n     * @description Return the type of an element\n     * @param {Element} el The DOM element to check\n     * @returns {String} The element type, e.g. 'input|text'\n     */\n    #getElementType(el) {\n        if (el.tagName.toLowerCase() === \"input\") {\n            return [el.tagName, el.type].map(item => item.toLowerCase()).join(\"|\");\n        }\n        return el.tagName.toLowerCase();\n    }\n\n    /**\n     * @method\n     * @private\n     * @name belongsToController\n     * @memberof! Controller\n     * @description Return true if the given element belongs to this controller\n     * @param {Element} el The controller root DOM element\n     * @returns {Boolean} True if the element belongs to the controller\n     */\n    belongsToController(el) {\n        // If we're using the shadow DOM then we only see this controllers children so it must belong to the controller\n        if (this.hasShadow) return true;\n\n        // Controllers don't belong to themselves, go up a level to find their parent\n        if (el.hasAttribute(\"data-controller\")) el = el.parentElement;\n\n        const closestController = el.closest(`[data-controller]`);\n        return closestController === this;\n    }\n}\n\nexport { Controller };\n"],"names":["kebabToCamel","permutations","parseDuration","parseBoolean","Controller","HTMLElement","connectedCallback","isConnected","renderOnInit","bind","init","args","autoRender","interval","setAutoRender","render","disconnectedCallback","_events","forEach","e","el","removeEventListener","eventType","event","attributeChangedCallback","name","oldValue","newValue","handler","replace","charAt","toUpperCase","slice","emit","eventName","detail","config","dispatchEvent","CustomEvent","bubbles","cancelable","composed","listenFor","target","callback","addEventListener","_internal","bound","bindArgs","bindEvents","bindDataValues","undefined","console","error","localName","autoRenderInterval","window","clearInterval","setInterval","renderSelf","findRenderableElements","template","getAttribute","innerText","setAttribute","evalMode","hasAttribute","replacerRegex","replacer","key","fn","Function","call","pos","split","filter","item","part","toString","innerHTML","belongsToController","hasShadow","parentElement","closestController","closest","constructor","root","trim","self","querySelector","content","cloneNode","attachShadow","mode","appendChild","shadowRoot","observedAttributes","querySelectorAll","getAttributeNames","attr","value","bindEvent","modifier","action","callable","includes","preventDefault","type","push","nodesWithEvents","document","evaluate","eventNode","iterateNext","startsWith","modifiers","data","instance","tagToEvent","default","handlers","varName","checked","select","Array","from","selectedOptions","map","bindData","elType","getElementType","escapedModifier","tagName","toLowerCase","join"],"mappings":"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"}